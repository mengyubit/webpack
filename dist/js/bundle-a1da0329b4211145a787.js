!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:U})},B.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=2)}([function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (window) {\n    var _defaults = {\n        instructionsPullToRefresh: 'pull to refresh', // text\n        instructionsReleaseToRefresh: 'Release to refresh', //text\n        instructionsRefreshing: 'refreshing', // text\n        threshold: 60, // minimum distance required to trigger the refresh.\n        onPull: function onPull() {\n            return location.reload();\n        }\n    };\n    var offsetDownH = 90;\n    var _pullLengh = 0;\n    var _startLength = 0;\n    var _ptrEle = '',\n        _upEle = '';\n    var _ptrTextEle = '',\n        _upTextEle = '';\n    var _element = '';\n    var upOrDown = ''; //上拉还是下拉\n    var scrollTop = '';\n    var pullToRefresh = {\n        init: function init(cfg) {\n            Object.keys(_defaults).forEach(function (key) {\n                cfg[key] = cfg[key] || _defaults[key];\n            });\n            _element = document.querySelector(cfg.targetElement);\n\n            //下拉刷新\n            _ptrEle = document.querySelector(cfg.ptrElement);\n            _ptrTextEle = document.querySelector(cfg.ptrTextElement);\n\n            //上拉刷新\n            _upEle = document.querySelector(cfg.upElement);\n            _upTextEle = document.querySelector(cfg.upTextElement);\n\n            // init style\n\n            _ptrEle.style.position = 'absolute';\n            _upEle.style.position = 'absolute';\n\n            _ptrTextEle.innerText = cfg.instructionsPullToRefresh;\n            _upTextEle.innerText = cfg.instructionsPullToRefresh;\n\n            // blind event\n            _element.addEventListener('touchstart', function (event) {\n\n                _startLength = event.touches[0].pageY;\n                // _element.removeAttribute('style');\n                _element.style['transition'] = 'transform 0s';\n                // 'pull to refresh'\n                _ptrTextEle.innerText = cfg.instructionsPullToRefresh;\n            });\n\n            _element.addEventListener('touchmove', function (event) {\n                _pullLengh = event.touches[0].pageY - _startLength;\n                scrollTop = _element.scrollTop;\n                // 下拉\n                if (_pullLengh > 0 && scrollTop === 0) {\n                    upOrDown = 'down';\n                    pullElement(_element, _pullLengh, cfg, 'down');\n                } else if (_pullLengh < 0 && scrollTop + _element.offsetHeight > _upEle.offsetTop) {\n                    //上拉\n                    upOrDown = 'up';\n                    _upEle.style.visibility = 'visible';\n                    pullElement(_element, -_pullLengh, cfg, 'up');\n                }\n            });\n            _element.addEventListener('touchend', function () {\n                if (upOrDown === 'down') {\n                    if (_pullLengh > cfg.threshold) {\n                        // 'refreshing'\n                        _ptrTextEle.innerText = cfg.instructionsRefreshing;\n                        cfg.onPull();\n                        _pullLengh = 0;\n                    }\n                    _element.style['transition'] = 'transform 0.6s ease';\n                    _element.style['transform'] = 'translate(0, 0px)';\n                } else if (upOrDown === 'up') {\n                    if (-_pullLengh > cfg.thresholdUp) {\n                        // 'refreshing'\n                        _upTextEle.innerText = cfg.instructionsRefreshing;\n                        cfg.onPullUp();\n                        _pullLengh = 0;\n                        _upEle.style.visibility = 'hidden';\n                    }\n                    _element.style['transition'] = 'transform 0.6s ease';\n                    _element.style['transform'] = 'translate(0, 0px)';\n                }\n                upOrDown = '';\n            });\n        }\n    };\n\n    var pullElement = function pullElement(element, length, cfg, upOrDown) {\n        //下拉\n        if (upOrDown === 'down') {\n            if (length < offsetDownH) {\n                element.style['transform'] = 'translate(0, ' + length + 'px)';\n                _ptrEle.style['height'] = length + 'px';\n                if (length > cfg.threshold) {\n                    // 'release to fresh'\n                    _ptrTextEle.innerText = cfg.instructionsReleaseToRefresh;\n                } else {\n                    _ptrTextEle.innerText = cfg.instructionsPullToRefresh;\n                }\n            }\n        } else if (upOrDown === 'up') {\n            //上拉\n            if (length < _upEle.offsetHeight) {\n                element.style['transform'] = 'translate(0, ' - length + 'px)';\n                if (length > cfg.thresholdUp) {\n                    // 'release to fresh'\n                    _upTextEle.innerText = cfg.instructionsReleaseToRefresh;\n                }\n            }\n        }\n    };\n    window.pullToRefresh = pullToRefresh;\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* Zepto 1.1.6 - zepto event ajax form ie detect fx fx_methods data deferred callbacks touch gesture - zeptojs.com/license */\n\nvar Zepto = function () {\n  var undefined,\n      key,\n      $,\n      classList,\n      emptyArray = [],\n      _concat = emptyArray.concat,\n      _filter = emptyArray.filter,\n      _slice = emptyArray.slice,\n      document = window.document,\n      elementDisplay = {},\n      classCache = {},\n      cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1, 'opacity': 1, 'z-index': 1, 'zoom': 1 },\n      fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\n      singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/ig,\n      rootNodeRE = /^(?:body|html)$/i,\n      capitalRE = /([A-Z])/g,\n\n\n  // special attributes that should be get/set via method calls\n  methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],\n      adjacencyOperators = ['after', 'prepend', 'before', 'append'],\n      table = document.createElement('table'),\n      tableRow = document.createElement('tr'),\n      containers = {\n    'tr': document.createElement('tbody'),\n    'tbody': table, 'thead': table, 'tfoot': table,\n    'td': tableRow, 'th': tableRow,\n    '*': document.createElement('div')\n  },\n      readyRE = /complete|loaded|interactive/,\n      simpleSelectorRE = /^[\\w-]*$/,\n      class2type = {},\n      toString = class2type.toString,\n      zepto = {},\n      camelize,\n      uniq,\n      tempParent = document.createElement('div'),\n      propMap = {\n    'tabindex': 'tabIndex',\n    'readonly': 'readOnly',\n    'for': 'htmlFor',\n    'class': 'className',\n    'maxlength': 'maxLength',\n    'cellspacing': 'cellSpacing',\n    'cellpadding': 'cellPadding',\n    'rowspan': 'rowSpan',\n    'colspan': 'colSpan',\n    'usemap': 'useMap',\n    'frameborder': 'frameBorder',\n    'contenteditable': 'contentEditable'\n  },\n      isArray = Array.isArray || function (object) {\n    return object instanceof Array;\n  };\n\n  zepto.matches = function (element, selector) {\n    if (!selector || !element || element.nodeType !== 1) return false;\n    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.matchesSelector;\n    if (matchesSelector) return matchesSelector.call(element, selector);\n    // fall back to performing a selector:\n    var match,\n        parent = element.parentNode,\n        temp = !parent;\n    if (temp) (parent = tempParent).appendChild(element);\n    match = ~zepto.qsa(parent, selector).indexOf(element);\n    temp && tempParent.removeChild(element);\n    return match;\n  };\n\n  function type(obj) {\n    return obj == null ? String(obj) : class2type[toString.call(obj)] || \"object\";\n  }\n\n  function isFunction(value) {\n    return type(value) == \"function\";\n  }\n  function isWindow(obj) {\n    return obj != null && obj == obj.window;\n  }\n  function isDocument(obj) {\n    return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\n  }\n  function isObject(obj) {\n    return type(obj) == \"object\";\n  }\n  function isPlainObject(obj) {\n    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\n  }\n  function likeArray(obj) {\n    return typeof obj.length == 'number';\n  }\n\n  function compact(array) {\n    return _filter.call(array, function (item) {\n      return item != null;\n    });\n  }\n  function flatten(array) {\n    return array.length > 0 ? $.fn.concat.apply([], array) : array;\n  }\n  camelize = function camelize(str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  };\n  function dasherize(str) {\n    return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\n  }\n  uniq = function uniq(array) {\n    return _filter.call(array, function (item, idx) {\n      return array.indexOf(item) == idx;\n    });\n  };\n\n  function classRE(name) {\n    return name in classCache ? classCache[name] : classCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)');\n  }\n\n  function maybeAddPx(name, value) {\n    return typeof value == \"number\" && !cssNumber[dasherize(name)] ? value + \"px\" : value;\n  }\n\n  function defaultDisplay(nodeName) {\n    var element, display;\n    if (!elementDisplay[nodeName]) {\n      element = document.createElement(nodeName);\n      document.body.appendChild(element);\n      display = getComputedStyle(element, '').getPropertyValue(\"display\");\n      element.parentNode.removeChild(element);\n      display == \"none\" && (display = \"block\");\n      elementDisplay[nodeName] = display;\n    }\n    return elementDisplay[nodeName];\n  }\n\n  function _children(element) {\n    return 'children' in element ? _slice.call(element.children) : $.map(element.childNodes, function (node) {\n      if (node.nodeType == 1) return node;\n    });\n  }\n\n  function Z(dom, selector) {\n    var i,\n        len = dom ? dom.length : 0;\n    for (i = 0; i < len; i++) {\n      this[i] = dom[i];\n    }this.length = len;\n    this.selector = selector || '';\n  }\n\n  // `$.zepto.fragment` takes a html string and an optional tag name\n  // to generate DOM nodes nodes from the given html string.\n  // The generated DOM nodes are returned as an array.\n  // This function can be overriden in plugins for example to make\n  // it compatible with browsers that don't support the DOM fully.\n  zepto.fragment = function (html, name, properties) {\n    var dom, nodes, container;\n\n    // A special case optimization for a single tag\n    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1));\n\n    if (!dom) {\n      if (html.replace) html = html.replace(tagExpanderRE, \"<$1></$2>\");\n      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1;\n      if (!(name in containers)) name = '*';\n\n      container = containers[name];\n      container.innerHTML = '' + html;\n      dom = $.each(_slice.call(container.childNodes), function () {\n        container.removeChild(this);\n      });\n    }\n\n    if (isPlainObject(properties)) {\n      nodes = $(dom);\n      $.each(properties, function (key, value) {\n        if (methodAttributes.indexOf(key) > -1) nodes[key](value);else nodes.attr(key, value);\n      });\n    }\n\n    return dom;\n  };\n\n  // `$.zepto.Z` swaps out the prototype of the given `dom` array\n  // of nodes with `$.fn` and thus supplying all the Zepto functions\n  // to the array. This method can be overriden in plugins.\n  zepto.Z = function (dom, selector) {\n    return new Z(dom, selector);\n  };\n\n  // `$.zepto.isZ` should return `true` if the given object is a Zepto\n  // collection. This method can be overriden in plugins.\n  zepto.isZ = function (object) {\n    return object instanceof zepto.Z;\n  };\n\n  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and\n  // takes a CSS selector and an optional context (and handles various\n  // special cases).\n  // This method can be overriden in plugins.\n  zepto.init = function (selector, context) {\n    var dom;\n    // If nothing given, return an empty Zepto collection\n    if (!selector) return zepto.Z();\n    // Optimize for string selectors\n    else if (typeof selector == 'string') {\n        selector = selector.trim();\n        // If it's a html fragment, create nodes from it\n        // Note: In both Chrome 21 and Firefox 15, DOM error 12\n        // is thrown if the fragment doesn't begin with <\n        if (selector[0] == '<' && fragmentRE.test(selector)) dom = zepto.fragment(selector, RegExp.$1, context), selector = null;\n        // If there's a context, create a collection on that context first, and select\n        // nodes from there\n        else if (context !== undefined) return $(context).find(selector);\n          // If it's a CSS selector, use it to select nodes.\n          else dom = zepto.qsa(document, selector);\n      }\n      // If a function is given, call it when the DOM is ready\n      else if (isFunction(selector)) return $(document).ready(selector);\n        // If a Zepto collection is given, just return it\n        else if (zepto.isZ(selector)) return selector;else {\n            // normalize array if an array of nodes is given\n            if (isArray(selector)) dom = compact(selector);\n            // Wrap DOM nodes.\n            else if (isObject(selector)) dom = [selector], selector = null;\n              // If it's a html fragment, create nodes from it\n              else if (fragmentRE.test(selector)) dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null;\n                // If there's a context, create a collection on that context first, and select\n                // nodes from there\n                else if (context !== undefined) return $(context).find(selector);\n                  // And last but no least, if it's a CSS selector, use it to select nodes.\n                  else dom = zepto.qsa(document, selector);\n          }\n    // create a new Zepto collection from the nodes found\n    return zepto.Z(dom, selector);\n  };\n\n  // `$` will be the base `Zepto` object. When calling this\n  // function just call `$.zepto.init, which makes the implementation\n  // details of selecting nodes and creating Zepto collections\n  // patchable in plugins.\n  $ = function $(selector, context) {\n    return zepto.init(selector, context);\n  };\n\n  function extend(target, source, deep) {\n    for (key in source) {\n      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\n        if (isPlainObject(source[key]) && !isPlainObject(target[key])) target[key] = {};\n        if (isArray(source[key]) && !isArray(target[key])) target[key] = [];\n        extend(target[key], source[key], deep);\n      } else if (source[key] !== undefined) target[key] = source[key];\n    }\n  }\n\n  // Copy all but undefined properties from one or more\n  // objects to the `target` object.\n  $.extend = function (target) {\n    var deep,\n        args = _slice.call(arguments, 1);\n    if (typeof target == 'boolean') {\n      deep = target;\n      target = args.shift();\n    }\n    args.forEach(function (arg) {\n      extend(target, arg, deep);\n    });\n    return target;\n  };\n\n  // `$.zepto.qsa` is Zepto's CSS selector implementation which\n  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.\n  // This method can be overriden in plugins.\n  zepto.qsa = function (element, selector) {\n    var found,\n        maybeID = selector[0] == '#',\n        maybeClass = !maybeID && selector[0] == '.',\n        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,\n        // Ensure that a 1 char tag name still gets checked\n    isSimple = simpleSelectorRE.test(nameOnly);\n    return element.getElementById && isSimple && maybeID ? // Safari DocumentFragment doesn't have getElementById\n    (found = element.getElementById(nameOnly)) ? [found] : [] : element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11 ? [] : _slice.call(isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n    maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n    element.getElementsByTagName(selector) : // Or a tag\n    element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n    );\n  };\n\n  function filtered(nodes, selector) {\n    return selector == null ? $(nodes) : $(nodes).filter(selector);\n  }\n\n  $.contains = document.documentElement.contains ? function (parent, node) {\n    return parent !== node && parent.contains(node);\n  } : function (parent, node) {\n    while (node && (node = node.parentNode)) {\n      if (node === parent) return true;\n    }return false;\n  };\n\n  function funcArg(context, arg, idx, payload) {\n    return isFunction(arg) ? arg.call(context, idx, payload) : arg;\n  }\n\n  function setAttribute(node, name, value) {\n    value == null ? node.removeAttribute(name) : node.setAttribute(name, value);\n  }\n\n  // access className property while respecting SVGAnimatedString\n  function className(node, value) {\n    var klass = node.className || '',\n        svg = klass && klass.baseVal !== undefined;\n\n    if (value === undefined) return svg ? klass.baseVal : klass;\n    svg ? klass.baseVal = value : node.className = value;\n  }\n\n  // \"true\"  => true\n  // \"false\" => false\n  // \"null\"  => null\n  // \"42\"    => 42\n  // \"42.5\"  => 42.5\n  // \"08\"    => \"08\"\n  // JSON    => parse if valid\n  // String  => self\n  function deserializeValue(value) {\n    try {\n      return value ? value == \"true\" || (value == \"false\" ? false : value == \"null\" ? null : +value + \"\" == value ? +value : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\n    } catch (e) {\n      return value;\n    }\n  }\n\n  $.type = type;\n  $.isFunction = isFunction;\n  $.isWindow = isWindow;\n  $.isArray = isArray;\n  $.isPlainObject = isPlainObject;\n\n  $.isEmptyObject = function (obj) {\n    var name;\n    for (name in obj) {\n      return false;\n    }return true;\n  };\n\n  $.inArray = function (elem, array, i) {\n    return emptyArray.indexOf.call(array, elem, i);\n  };\n\n  $.camelCase = camelize;\n  $.trim = function (str) {\n    return str == null ? \"\" : String.prototype.trim.call(str);\n  };\n\n  // plugin compatibility\n  $.uuid = 0;\n  $.support = {};\n  $.expr = {};\n  $.noop = function () {};\n\n  $.map = function (elements, callback) {\n    var value,\n        values = [],\n        i,\n        key;\n    if (likeArray(elements)) for (i = 0; i < elements.length; i++) {\n      value = callback(elements[i], i);\n      if (value != null) values.push(value);\n    } else for (key in elements) {\n      value = callback(elements[key], key);\n      if (value != null) values.push(value);\n    }\n    return flatten(values);\n  };\n\n  $.each = function (elements, callback) {\n    var i, key;\n    if (likeArray(elements)) {\n      for (i = 0; i < elements.length; i++) {\n        if (callback.call(elements[i], i, elements[i]) === false) return elements;\n      }\n    } else {\n      for (key in elements) {\n        if (callback.call(elements[key], key, elements[key]) === false) return elements;\n      }\n    }\n\n    return elements;\n  };\n\n  $.grep = function (elements, callback) {\n    return _filter.call(elements, callback);\n  };\n\n  if (window.JSON) $.parseJSON = JSON.parse;\n\n  // Populate the class2type map\n  $.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  // Define methods that will be available on all\n  // Zepto collections\n  $.fn = {\n    constructor: zepto.Z,\n    length: 0,\n\n    // Because a collection acts like an array\n    // copy over these useful array functions.\n    forEach: emptyArray.forEach,\n    reduce: emptyArray.reduce,\n    push: emptyArray.push,\n    sort: emptyArray.sort,\n    splice: emptyArray.splice,\n    indexOf: emptyArray.indexOf,\n    concat: function concat() {\n      var i,\n          value,\n          args = [];\n      for (i = 0; i < arguments.length; i++) {\n        value = arguments[i];\n        args[i] = zepto.isZ(value) ? value.toArray() : value;\n      }\n      return _concat.apply(zepto.isZ(this) ? this.toArray() : this, args);\n    },\n\n    // `map` and `slice` in the jQuery API work differently\n    // from their array counterparts\n    map: function map(fn) {\n      return $($.map(this, function (el, i) {\n        return fn.call(el, i, el);\n      }));\n    },\n    slice: function slice() {\n      return $(_slice.apply(this, arguments));\n    },\n\n    ready: function ready(callback) {\n      // need to check if document.body exists for IE as that browser reports\n      // document ready when it hasn't yet created the body element\n      if (readyRE.test(document.readyState) && document.body) callback($);else document.addEventListener('DOMContentLoaded', function () {\n        callback($);\n      }, false);\n      return this;\n    },\n    get: function get(idx) {\n      return idx === undefined ? _slice.call(this) : this[idx >= 0 ? idx : idx + this.length];\n    },\n    toArray: function toArray() {\n      return this.get();\n    },\n    size: function size() {\n      return this.length;\n    },\n    remove: function remove() {\n      return this.each(function () {\n        if (this.parentNode != null) this.parentNode.removeChild(this);\n      });\n    },\n    each: function each(callback) {\n      emptyArray.every.call(this, function (el, idx) {\n        return callback.call(el, idx, el) !== false;\n      });\n      return this;\n    },\n    filter: function filter(selector) {\n      if (isFunction(selector)) return this.not(this.not(selector));\n      return $(_filter.call(this, function (element) {\n        return zepto.matches(element, selector);\n      }));\n    },\n    add: function add(selector, context) {\n      return $(uniq(this.concat($(selector, context))));\n    },\n    is: function is(selector) {\n      return this.length > 0 && zepto.matches(this[0], selector);\n    },\n    not: function not(selector) {\n      var nodes = [];\n      if (isFunction(selector) && selector.call !== undefined) this.each(function (idx) {\n        if (!selector.call(this, idx)) nodes.push(this);\n      });else {\n        var excludes = typeof selector == 'string' ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? _slice.call(selector) : $(selector);\n        this.forEach(function (el) {\n          if (excludes.indexOf(el) < 0) nodes.push(el);\n        });\n      }\n      return $(nodes);\n    },\n    has: function has(selector) {\n      return this.filter(function () {\n        return isObject(selector) ? $.contains(this, selector) : $(this).find(selector).size();\n      });\n    },\n    eq: function eq(idx) {\n      return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\n    },\n    first: function first() {\n      var el = this[0];\n      return el && !isObject(el) ? el : $(el);\n    },\n    last: function last() {\n      var el = this[this.length - 1];\n      return el && !isObject(el) ? el : $(el);\n    },\n    find: function find(selector) {\n      var result,\n          $this = this;\n      if (!selector) result = $();else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') result = $(selector).filter(function () {\n        var node = this;\n        return emptyArray.some.call($this, function (parent) {\n          return $.contains(parent, node);\n        });\n      });else if (this.length == 1) result = $(zepto.qsa(this[0], selector));else result = this.map(function () {\n        return zepto.qsa(this, selector);\n      });\n      return result;\n    },\n    closest: function closest(selector, context) {\n      var node = this[0],\n          collection = false;\n      if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') collection = $(selector);\n      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector))) {\n        node = node !== context && !isDocument(node) && node.parentNode;\n      }return $(node);\n    },\n    parents: function parents(selector) {\n      var ancestors = [],\n          nodes = this;\n      while (nodes.length > 0) {\n        nodes = $.map(nodes, function (node) {\n          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {\n            ancestors.push(node);\n            return node;\n          }\n        });\n      }return filtered(ancestors, selector);\n    },\n    parent: function parent(selector) {\n      return filtered(uniq(this.pluck('parentNode')), selector);\n    },\n    children: function children(selector) {\n      return filtered(this.map(function () {\n        return _children(this);\n      }), selector);\n    },\n    contents: function contents() {\n      return this.map(function () {\n        return this.contentDocument || _slice.call(this.childNodes);\n      });\n    },\n    siblings: function siblings(selector) {\n      return filtered(this.map(function (i, el) {\n        return _filter.call(_children(el.parentNode), function (child) {\n          return child !== el;\n        });\n      }), selector);\n    },\n    empty: function empty() {\n      return this.each(function () {\n        this.innerHTML = '';\n      });\n    },\n    // `pluck` is borrowed from Prototype.js\n    pluck: function pluck(property) {\n      return $.map(this, function (el) {\n        return el[property];\n      });\n    },\n    show: function show() {\n      return this.each(function () {\n        this.style.display == \"none\" && (this.style.display = '');\n        if (getComputedStyle(this, '').getPropertyValue(\"display\") == \"none\") this.style.display = defaultDisplay(this.nodeName);\n      });\n    },\n    replaceWith: function replaceWith(newContent) {\n      return this.before(newContent).remove();\n    },\n    wrap: function wrap(structure) {\n      var func = isFunction(structure);\n      if (this[0] && !func) var dom = $(structure).get(0),\n          clone = dom.parentNode || this.length > 1;\n\n      return this.each(function (index) {\n        $(this).wrapAll(func ? structure.call(this, index) : clone ? dom.cloneNode(true) : dom);\n      });\n    },\n    wrapAll: function wrapAll(structure) {\n      if (this[0]) {\n        $(this[0]).before(structure = $(structure));\n        var children;\n        // drill down to the inmost element\n        while ((children = structure.children()).length) {\n          structure = children.first();\n        }$(structure).append(this);\n      }\n      return this;\n    },\n    wrapInner: function wrapInner(structure) {\n      var func = isFunction(structure);\n      return this.each(function (index) {\n        var self = $(this),\n            contents = self.contents(),\n            dom = func ? structure.call(this, index) : structure;\n        contents.length ? contents.wrapAll(dom) : self.append(dom);\n      });\n    },\n    unwrap: function unwrap() {\n      this.parent().each(function () {\n        $(this).replaceWith($(this).children());\n      });\n      return this;\n    },\n    clone: function clone() {\n      return this.map(function () {\n        return this.cloneNode(true);\n      });\n    },\n    hide: function hide() {\n      return this.css(\"display\", \"none\");\n    },\n    toggle: function toggle(setting) {\n      return this.each(function () {\n        var el = $(this);(setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show() : el.hide();\n      });\n    },\n    prev: function prev(selector) {\n      return $(this.pluck('previousElementSibling')).filter(selector || '*');\n    },\n    next: function next(selector) {\n      return $(this.pluck('nextElementSibling')).filter(selector || '*');\n    },\n    html: function html(_html) {\n      return 0 in arguments ? this.each(function (idx) {\n        var originHtml = this.innerHTML;\n        $(this).empty().append(funcArg(this, _html, idx, originHtml));\n      }) : 0 in this ? this[0].innerHTML : null;\n    },\n    text: function text(_text) {\n      return 0 in arguments ? this.each(function (idx) {\n        var newText = funcArg(this, _text, idx, this.textContent);\n        this.textContent = newText == null ? '' : '' + newText;\n      }) : 0 in this ? this[0].textContent : null;\n    },\n    attr: function attr(name, value) {\n      var result;\n      return typeof name == 'string' && !(1 in arguments) ? !this.length || this[0].nodeType !== 1 ? undefined : !(result = this[0].getAttribute(name)) && name in this[0] ? this[0][name] : result : this.each(function (idx) {\n        if (this.nodeType !== 1) return;\n        if (isObject(name)) for (key in name) {\n          setAttribute(this, key, name[key]);\n        } else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)));\n      });\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        this.nodeType === 1 && name.split(' ').forEach(function (attribute) {\n          setAttribute(this, attribute);\n        }, this);\n      });\n    },\n    prop: function prop(name, value) {\n      name = propMap[name] || name;\n      return 1 in arguments ? this.each(function (idx) {\n        this[name] = funcArg(this, value, idx, this[name]);\n      }) : this[0] && this[0][name];\n    },\n    data: function data(name, value) {\n      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase();\n\n      var data = 1 in arguments ? this.attr(attrName, value) : this.attr(attrName);\n\n      return data !== null ? deserializeValue(data) : undefined;\n    },\n    val: function val(value) {\n      return 0 in arguments ? this.each(function (idx) {\n        this.value = funcArg(this, value, idx, this.value);\n      }) : this[0] && (this[0].multiple ? $(this[0]).find('option').filter(function () {\n        return this.selected;\n      }).pluck('value') : this[0].value);\n    },\n    offset: function offset(coordinates) {\n      if (coordinates) return this.each(function (index) {\n        var $this = $(this),\n            coords = funcArg(this, coordinates, index, $this.offset()),\n            parentOffset = $this.offsetParent().offset(),\n            props = {\n          top: coords.top - parentOffset.top,\n          left: coords.left - parentOffset.left\n        };\n\n        if ($this.css('position') == 'static') props['position'] = 'relative';\n        $this.css(props);\n      });\n      if (!this.length) return null;\n      if (!$.contains(document.documentElement, this[0])) return { top: 0, left: 0 };\n      var obj = this[0].getBoundingClientRect();\n      return {\n        left: obj.left + window.pageXOffset,\n        top: obj.top + window.pageYOffset,\n        width: Math.round(obj.width),\n        height: Math.round(obj.height)\n      };\n    },\n    css: function css(property, value) {\n      if (arguments.length < 2) {\n        var computedStyle,\n            element = this[0];\n        if (!element) return;\n        computedStyle = getComputedStyle(element, '');\n        if (typeof property == 'string') return element.style[camelize(property)] || computedStyle.getPropertyValue(property);else if (isArray(property)) {\n          var props = {};\n          $.each(property, function (_, prop) {\n            props[prop] = element.style[camelize(prop)] || computedStyle.getPropertyValue(prop);\n          });\n          return props;\n        }\n      }\n\n      var css = '';\n      if (type(property) == 'string') {\n        if (!value && value !== 0) this.each(function () {\n          this.style.removeProperty(dasherize(property));\n        });else css = dasherize(property) + \":\" + maybeAddPx(property, value);\n      } else {\n        for (key in property) {\n          if (!property[key] && property[key] !== 0) this.each(function () {\n            this.style.removeProperty(dasherize(key));\n          });else css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';\n        }\n      }\n\n      return this.each(function () {\n        this.style.cssText += ';' + css;\n      });\n    },\n    index: function index(element) {\n      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);\n    },\n    hasClass: function hasClass(name) {\n      if (!name) return false;\n      return emptyArray.some.call(this, function (el) {\n        return this.test(className(el));\n      }, classRE(name));\n    },\n    addClass: function addClass(name) {\n      if (!name) return this;\n      return this.each(function (idx) {\n        if (!('className' in this)) return;\n        classList = [];\n        var cls = className(this),\n            newName = funcArg(this, name, idx, cls);\n        newName.split(/\\s+/g).forEach(function (klass) {\n          if (!$(this).hasClass(klass)) classList.push(klass);\n        }, this);\n        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"));\n      });\n    },\n    removeClass: function removeClass(name) {\n      return this.each(function (idx) {\n        if (!('className' in this)) return;\n        if (name === undefined) return className(this, '');\n        classList = className(this);\n        funcArg(this, name, idx, classList).split(/\\s+/g).forEach(function (klass) {\n          classList = classList.replace(classRE(klass), \" \");\n        });\n        className(this, classList.trim());\n      });\n    },\n    toggleClass: function toggleClass(name, when) {\n      if (!name) return this;\n      return this.each(function (idx) {\n        var $this = $(this),\n            names = funcArg(this, name, idx, className(this));\n        names.split(/\\s+/g).forEach(function (klass) {\n          (when === undefined ? !$this.hasClass(klass) : when) ? $this.addClass(klass) : $this.removeClass(klass);\n        });\n      });\n    },\n    scrollTop: function scrollTop(value) {\n      if (!this.length) return;\n      var hasScrollTop = 'scrollTop' in this[0];\n      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset;\n      return this.each(hasScrollTop ? function () {\n        this.scrollTop = value;\n      } : function () {\n        this.scrollTo(this.scrollX, value);\n      });\n    },\n    scrollLeft: function scrollLeft(value) {\n      if (!this.length) return;\n      var hasScrollLeft = 'scrollLeft' in this[0];\n      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset;\n      return this.each(hasScrollLeft ? function () {\n        this.scrollLeft = value;\n      } : function () {\n        this.scrollTo(value, this.scrollY);\n      });\n    },\n    position: function position() {\n      if (!this.length) return;\n\n      var elem = this[0],\n\n      // Get *real* offsetParent\n      offsetParent = this.offsetParent(),\n\n      // Get correct offsets\n      offset = this.offset(),\n          parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();\n\n      // Subtract element margins\n      // note: when an element has margin: auto the offsetLeft and marginLeft\n      // are the same in Safari causing offset.left to incorrectly be 0\n      offset.top -= parseFloat($(elem).css('margin-top')) || 0;\n      offset.left -= parseFloat($(elem).css('margin-left')) || 0;\n\n      // Add offsetParent borders\n      parentOffset.top += parseFloat($(offsetParent[0]).css('border-top-width')) || 0;\n      parentOffset.left += parseFloat($(offsetParent[0]).css('border-left-width')) || 0;\n\n      // Subtract the two offsets\n      return {\n        top: offset.top - parentOffset.top,\n        left: offset.left - parentOffset.left\n      };\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var parent = this.offsetParent || document.body;\n        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css(\"position\") == \"static\") {\n          parent = parent.offsetParent;\n        }return parent;\n      });\n    }\n\n    // for now\n  };$.fn.detach = $.fn.remove\n\n  // Generate the `width` and `height` functions\n  ;['width', 'height'].forEach(function (dimension) {\n    var dimensionProperty = dimension.replace(/./, function (m) {\n      return m[0].toUpperCase();\n    });\n\n    $.fn[dimension] = function (value) {\n      var offset,\n          el = this[0];\n      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] : isDocument(el) ? el.documentElement['scroll' + dimensionProperty] : (offset = this.offset()) && offset[dimension];else return this.each(function (idx) {\n        el = $(this);\n        el.css(dimension, funcArg(this, value, idx, el[dimension]()));\n      });\n    };\n  });\n  //height with margin\n  $.fn.outerHeight = function () {\n    var dom = this[0],\n        style = window.getComputedStyle(dom);\n    return dom.offsetHeight + parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  };\n\n  function traverseNode(node, fun) {\n    fun(node);\n    for (var i = 0, len = node.childNodes.length; i < len; i++) {\n      traverseNode(node.childNodes[i], fun);\n    }\n  }\n\n  // Generate the `after`, `prepend`, `before`, `append`,\n  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.\n  adjacencyOperators.forEach(function (operator, operatorIndex) {\n    var inside = operatorIndex % 2; //=> prepend, append\n\n    $.fn[operator] = function () {\n      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings\n      var argType,\n          nodes = $.map(arguments, function (arg) {\n        argType = type(arg);\n        return argType == \"object\" || argType == \"array\" || arg == null ? arg : zepto.fragment(arg);\n      }),\n          parent,\n          copyByClone = this.length > 1;\n      if (nodes.length < 1) return this;\n\n      return this.each(function (_, target) {\n        parent = inside ? target : target.parentNode;\n\n        // convert all methods to a \"before\" operation\n        target = operatorIndex == 0 ? target.nextSibling : operatorIndex == 1 ? target.firstChild : operatorIndex == 2 ? target : null;\n\n        var parentInDocument = $.contains(document.documentElement, parent);\n\n        nodes.forEach(function (node) {\n          if (copyByClone) node = node.cloneNode(true);else if (!parent) return $(node).remove();\n\n          parent.insertBefore(node, target);\n          if (parentInDocument) traverseNode(node, function (el) {\n            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' && (!el.type || el.type === 'text/javascript') && !el.src) window['eval'].call(window, el.innerHTML);\n          });\n        });\n      });\n    };\n\n    // after    => insertAfter\n    // prepend  => prependTo\n    // before   => insertBefore\n    // append   => appendTo\n    $.fn[inside ? operator + 'To' : 'insert' + (operatorIndex ? 'Before' : 'After')] = function (html) {\n      $(html)[operator](this);\n      return this;\n    };\n  });\n\n  zepto.Z.prototype = Z.prototype = $.fn;\n\n  // Export internal API functions in the `$.zepto` namespace\n  zepto.uniq = uniq;\n  zepto.deserializeValue = deserializeValue;\n  $.zepto = zepto;\n\n  return $;\n}();\n\nwindow.Zepto = Zepto;\nwindow.$ === undefined && (window.$ = Zepto);(function ($) {\n  var _zid = 1,\n      undefined,\n      slice = Array.prototype.slice,\n      isFunction = $.isFunction,\n      isString = function isString(obj) {\n    return typeof obj == 'string';\n  },\n      handlers = {},\n      specialEvents = {},\n      focusinSupported = 'onfocusin' in window,\n      focus = { focus: 'focusin', blur: 'focusout' },\n      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' };\n\n  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents';\n\n  function zid(element) {\n    return element._zid || (element._zid = _zid++);\n  }\n  function findHandlers(element, event, fn, selector) {\n    event = parse(event);\n    if (event.ns) var matcher = matcherFor(event.ns);\n    return (handlers[zid(element)] || []).filter(function (handler) {\n      return handler && (!event.e || handler.e == event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || zid(handler.fn) === zid(fn)) && (!selector || handler.sel == selector);\n    });\n  }\n  function parse(event) {\n    var parts = ('' + event).split('.');\n    return { e: parts[0], ns: parts.slice(1).sort().join(' ') };\n  }\n  function matcherFor(ns) {\n    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');\n  }\n\n  function eventCapture(handler, captureSetting) {\n    return handler.del && !focusinSupported && handler.e in focus || !!captureSetting;\n  }\n\n  function realEvent(type) {\n    return hover[type] || focusinSupported && focus[type] || type;\n  }\n\n  function add(element, events, fn, data, selector, delegator, capture) {\n    var id = zid(element),\n        set = handlers[id] || (handlers[id] = []);\n    events.split(/\\s/).forEach(function (event) {\n      if (event == 'ready') return $(document).ready(fn);\n      var handler = parse(event);\n      handler.fn = fn;\n      handler.sel = selector;\n      // emulate mouseenter, mouseleave\n      if (handler.e in hover) fn = function fn(e) {\n        var related = e.relatedTarget;\n        if (!related || related !== this && !$.contains(this, related)) return handler.fn.apply(this, arguments);\n      };\n      handler.del = delegator;\n      var callback = delegator || fn;\n      handler.proxy = function (e) {\n        e = compatible(e);\n        if (e.isImmediatePropagationStopped()) return;\n        e.data = data;\n        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args));\n        if (result === false) e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();\n        return result;\n      };\n      handler.i = set.length;\n      set.push(handler);\n      if ('addEventListener' in element) element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));\n    });\n  }\n  function remove(element, events, fn, selector, capture) {\n    var id = zid(element);(events || '').split(/\\s/).forEach(function (event) {\n      findHandlers(element, event, fn, selector).forEach(function (handler) {\n        delete handlers[id][handler.i];\n        if ('removeEventListener' in element) element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));\n      });\n    });\n  }\n\n  $.event = { add: add, remove: remove };\n\n  $.proxy = function (fn, context) {\n    var args = 2 in arguments && slice.call(arguments, 2);\n    if (isFunction(fn)) {\n      var proxyFn = function proxyFn() {\n        return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\n      };\n      proxyFn._zid = zid(fn);\n      return proxyFn;\n    } else if (isString(context)) {\n      if (args) {\n        args.unshift(fn[context], fn);\n        return $.proxy.apply(null, args);\n      } else {\n        return $.proxy(fn[context], fn);\n      }\n    } else {\n      throw new TypeError(\"expected function\");\n    }\n  };\n\n  $.fn.bind = function (event, data, callback) {\n    return this.on(event, data, callback);\n  };\n  $.fn.unbind = function (event, callback) {\n    return this.off(event, callback);\n  };\n  $.fn.one = function (event, selector, data, callback) {\n    return this.on(event, selector, data, callback, 1);\n  };\n\n  var returnTrue = function returnTrue() {\n    return true;\n  },\n      returnFalse = function returnFalse() {\n    return false;\n  },\n      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,\n      eventMethods = {\n    preventDefault: 'isDefaultPrevented',\n    stopImmediatePropagation: 'isImmediatePropagationStopped',\n    stopPropagation: 'isPropagationStopped'\n  };\n\n  function compatible(event, source) {\n    if (source || !event.isDefaultPrevented) {\n      source || (source = event);\n\n      $.each(eventMethods, function (name, predicate) {\n        var sourceMethod = source[name];\n        event[name] = function () {\n          this[predicate] = returnTrue;\n          return sourceMethod && sourceMethod.apply(source, arguments);\n        };\n        event[predicate] = returnFalse;\n      });\n\n      if (source.defaultPrevented !== undefined ? source.defaultPrevented : 'returnValue' in source ? source.returnValue === false : source.getPreventDefault && source.getPreventDefault()) event.isDefaultPrevented = returnTrue;\n    }\n    return event;\n  }\n\n  function createProxy(event) {\n    var key,\n        proxy = { originalEvent: event };\n    for (key in event) {\n      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key];\n    }return compatible(proxy, event);\n  }\n\n  $.fn.delegate = function (selector, event, callback) {\n    return this.on(event, selector, callback);\n  };\n  $.fn.undelegate = function (selector, event, callback) {\n    return this.off(event, selector, callback);\n  };\n\n  $.fn.live = function (event, callback) {\n    $(document.body).delegate(this.selector, event, callback);\n    return this;\n  };\n  $.fn.die = function (event, callback) {\n    $(document.body).undelegate(this.selector, event, callback);\n    return this;\n  };\n\n  $.fn.on = function (event, selector, data, callback, one) {\n    var autoRemove,\n        delegator,\n        $this = this;\n    if (event && !isString(event)) {\n      $.each(event, function (type, fn) {\n        $this.on(type, selector, data, fn, one);\n      });\n      return $this;\n    }\n\n    if (!isString(selector) && !isFunction(callback) && callback !== false) callback = data, data = selector, selector = undefined;\n    if (callback === undefined || data === false) callback = data, data = undefined;\n\n    if (callback === false) callback = returnFalse;\n\n    return $this.each(function (_, element) {\n      if (one) autoRemove = function autoRemove(e) {\n        remove(element, e.type, callback);\n        return callback.apply(this, arguments);\n      };\n\n      if (selector) delegator = function delegator(e) {\n        var evt,\n            match = $(e.target).closest(selector, element).get(0);\n        if (match && match !== element) {\n          evt = $.extend(createProxy(e), { currentTarget: match, liveFired: element });\n          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)));\n        }\n      };\n\n      add(element, event, callback, data, selector, delegator || autoRemove);\n    });\n  };\n  $.fn.off = function (event, selector, callback) {\n    var $this = this;\n    if (event && !isString(event)) {\n      $.each(event, function (type, fn) {\n        $this.off(type, selector, fn);\n      });\n      return $this;\n    }\n\n    if (!isString(selector) && !isFunction(callback) && callback !== false) callback = selector, selector = undefined;\n\n    if (callback === false) callback = returnFalse;\n\n    return $this.each(function () {\n      remove(this, event, callback, selector);\n    });\n  };\n\n  $.fn.trigger = function (event, args) {\n    event = isString(event) || $.isPlainObject(event) ? $.Event(event) : compatible(event);\n    event._args = args;\n    return this.each(function () {\n      // handle focus(), blur() by calling them directly\n      if (event.type in focus && typeof this[event.type] == \"function\") this[event.type]();\n      // items in the collection might not be DOM elements\n      else if ('dispatchEvent' in this) this.dispatchEvent(event);else $(this).triggerHandler(event, args);\n    });\n  };\n\n  // triggers event handlers on current element just as if an event occurred,\n  // doesn't trigger an actual event, doesn't bubble\n  $.fn.triggerHandler = function (event, args) {\n    var e, result;\n    this.each(function (i, element) {\n      e = createProxy(isString(event) ? $.Event(event) : event);\n      e._args = args;\n      e.target = element;\n      $.each(findHandlers(element, event.type || event), function (i, handler) {\n        result = handler.proxy(e);\n        if (e.isImmediatePropagationStopped()) return false;\n      });\n    });\n    return result;\n  }\n\n  // shortcut methods for `.bind(event, fn)` for each event type\n  ;('focusin focusout focus blur load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select keydown keypress keyup error').split(' ').forEach(function (event) {\n    $.fn[event] = function (callback) {\n      return 0 in arguments ? this.bind(event, callback) : this.trigger(event);\n    };\n  });\n\n  $.Event = function (type, props) {\n    if (!isString(type)) props = type, type = props.type;\n    var event = document.createEvent(specialEvents[type] || 'Events'),\n        bubbles = true;\n    if (props) for (var name in props) {\n      name == 'bubbles' ? bubbles = !!props[name] : event[name] = props[name];\n    }event.initEvent(type, bubbles, true);\n    return compatible(event);\n  };\n})(Zepto);(function ($) {\n  var jsonpID = 0,\n      document = window.document,\n      key,\n      name,\n      rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n      scriptTypeRE = /^(?:text|application)\\/javascript/i,\n      xmlTypeRE = /^(?:text|application)\\/xml/i,\n      jsonType = 'application/json',\n      htmlType = 'text/html',\n      blankRE = /^\\s*$/,\n      originAnchor = document.createElement('a');\n\n  originAnchor.href = window.location.href;\n\n  // trigger a custom event and return false if it was cancelled\n  function triggerAndReturn(context, eventName, data) {\n    var event = $.Event(eventName);\n    $(context).trigger(event, data);\n    return !event.isDefaultPrevented();\n  }\n\n  // trigger an Ajax \"global\" event\n  function triggerGlobal(settings, context, eventName, data) {\n    if (settings.global) return triggerAndReturn(context || document, eventName, data);\n  }\n\n  // Number of active Ajax requests\n  $.active = 0;\n\n  function ajaxStart(settings) {\n    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart');\n  }\n  function ajaxStop(settings) {\n    if (settings.global && ! --$.active) triggerGlobal(settings, null, 'ajaxStop');\n  }\n\n  // triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable\n  function ajaxBeforeSend(xhr, settings) {\n    var context = settings.context;\n    if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) return false;\n\n    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]);\n  }\n  function ajaxSuccess(data, xhr, settings, deferred) {\n    var context = settings.context,\n        status = 'success';\n    settings.success.call(context, data, status, xhr);\n    if (deferred) deferred.resolveWith(context, [data, status, xhr]);\n    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]);\n    ajaxComplete(status, xhr, settings);\n  }\n  // type: \"timeout\", \"error\", \"abort\", \"parsererror\"\n  function ajaxError(error, type, xhr, settings, deferred) {\n    var context = settings.context;\n    settings.error.call(context, xhr, type, error);\n    if (deferred) deferred.rejectWith(context, [xhr, type, error]);\n    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type]);\n    ajaxComplete(type, xhr, settings);\n  }\n  // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\n  function ajaxComplete(status, xhr, settings) {\n    var context = settings.context;\n    settings.complete.call(context, xhr, status);\n    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]);\n    ajaxStop(settings);\n  }\n\n  // Empty function, used as default callback\n  function empty() {}\n\n  $.ajaxJSONP = function (options, deferred) {\n    if (!('type' in options)) return $.ajax(options);\n\n    var _callbackName = options.jsonpCallback,\n        callbackName = ($.isFunction(_callbackName) ? _callbackName() : _callbackName) || 'jsonp' + ++jsonpID,\n        script = document.createElement('script'),\n        originalCallback = window[callbackName],\n        responseData,\n        abort = function abort(errorType) {\n      $(script).triggerHandler('error', errorType || 'abort');\n    },\n        xhr = { abort: abort },\n        abortTimeout;\n\n    if (deferred) deferred.promise(xhr);\n\n    $(script).on('load error', function (e, errorType) {\n      clearTimeout(abortTimeout);\n      $(script).off().remove();\n\n      if (e.type == 'error' || !responseData) {\n        ajaxError(null, errorType || 'error', xhr, options, deferred);\n      } else {\n        ajaxSuccess(responseData[0], xhr, options, deferred);\n      }\n\n      window[callbackName] = originalCallback;\n      if (responseData && $.isFunction(originalCallback)) originalCallback(responseData[0]);\n\n      originalCallback = responseData = undefined;\n    });\n\n    if (ajaxBeforeSend(xhr, options) === false) {\n      abort('abort');\n      return xhr;\n    }\n\n    window[callbackName] = function () {\n      responseData = arguments;\n    };\n\n    script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName);\n    document.head.appendChild(script);\n\n    if (options.timeout > 0) abortTimeout = setTimeout(function () {\n      abort('timeout');\n    }, options.timeout);\n\n    return xhr;\n  };\n\n  $.ajaxSettings = {\n    // Default type of request\n    type: 'GET',\n    // Callback that is executed before request\n    beforeSend: empty,\n    // Callback that is executed if the request succeeds\n    success: empty,\n    // Callback that is executed the the server drops error\n    error: empty,\n    // Callback that is executed on request complete (both: error and success)\n    complete: empty,\n    // The context for the callbacks\n    context: null,\n    // Whether to trigger \"global\" Ajax events\n    global: true,\n    // Transport\n    xhr: function xhr() {\n      return new window.XMLHttpRequest();\n    },\n    // MIME types mapping\n    // IIS returns Javascript as \"application/x-javascript\"\n    accepts: {\n      script: 'text/javascript, application/javascript, application/x-javascript',\n      json: jsonType,\n      xml: 'application/xml, text/xml',\n      html: htmlType,\n      text: 'text/plain'\n    },\n    // Whether the request is to another domain\n    crossDomain: false,\n    // Default timeout\n    timeout: 0,\n    // Whether data should be serialized to string\n    processData: true,\n    // Whether the browser should be allowed to cache GET responses\n    cache: true\n  };\n\n  function mimeToDataType(mime) {\n    if (mime) mime = mime.split(';', 2)[0];\n    return mime && (mime == htmlType ? 'html' : mime == jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';\n  }\n\n  function appendQuery(url, query) {\n    if (query == '') return url;\n    return (url + '&' + query).replace(/[&?]{1,2}/, '?');\n  }\n\n  // serialize payload and append it to the URL for GET requests\n  function serializeData(options) {\n    if (options.processData && options.data && $.type(options.data) != \"string\") options.data = $.param(options.data, options.traditional);\n    if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) options.url = appendQuery(options.url, options.data), options.data = undefined;\n  }\n\n  $.ajax = function (options) {\n    var settings = $.extend({}, options || {}),\n        deferred = $.Deferred && $.Deferred(),\n        urlAnchor,\n        hashIndex;\n    for (key in $.ajaxSettings) {\n      if (settings[key] === undefined) settings[key] = $.ajaxSettings[key];\n    }ajaxStart(settings);\n\n    if (!settings.crossDomain) {\n      urlAnchor = document.createElement('a');\n      urlAnchor.href = settings.url;\n      // cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049\n      urlAnchor.href = urlAnchor.href;\n      settings.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;\n    }\n\n    if (!settings.url) settings.url = window.location.toString();\n    if ((hashIndex = settings.url.indexOf('#')) > -1) settings.url = settings.url.slice(0, hashIndex);\n    serializeData(settings);\n\n    var dataType = settings.dataType,\n        hasPlaceholder = /\\?.+=\\?/.test(settings.url);\n    if (hasPlaceholder) dataType = 'jsonp';\n\n    if (settings.cache === false || (!options || options.cache !== true) && ('script' == dataType || 'jsonp' == dataType)) settings.url = appendQuery(settings.url, '_=' + Date.now());\n\n    if ('jsonp' == dataType) {\n      if (!hasPlaceholder) settings.url = appendQuery(settings.url, settings.jsonp ? settings.jsonp + '=?' : settings.jsonp === false ? '' : 'callback=?');\n      return $.ajaxJSONP(settings, deferred);\n    }\n\n    var mime = settings.accepts[dataType],\n        headers = {},\n        setHeader = function setHeader(name, value) {\n      headers[name.toLowerCase()] = [name, value];\n    },\n        protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,\n        xhr = settings.xhr(),\n        nativeSetHeader = xhr.setRequestHeader,\n        abortTimeout;\n\n    if (deferred) deferred.promise(xhr);\n\n    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest');\n    setHeader('Accept', mime || '*/*');\n    if (mime = settings.mimeType || mime) {\n      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0];\n      xhr.overrideMimeType && xhr.overrideMimeType(mime);\n    }\n    if (settings.contentType || settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET') setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded');\n\n    if (settings.headers) for (name in settings.headers) {\n      setHeader(name, settings.headers[name]);\n    }xhr.setRequestHeader = setHeader;\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4) {\n        xhr.onreadystatechange = empty;\n        clearTimeout(abortTimeout);\n        var result,\n            error = false;\n        if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304 || xhr.status == 0 && protocol == 'file:') {\n          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'));\n          result = xhr.responseText;\n\n          try {\n            // http://perfectionkills.com/global-eval-what-are-the-options/\n            if (dataType == 'script') (1, eval)(result);else if (dataType == 'xml') result = xhr.responseXML;else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result);\n          } catch (e) {\n            error = e;\n          }\n\n          if (error) ajaxError(error, 'parsererror', xhr, settings, deferred);else ajaxSuccess(result, xhr, settings, deferred);\n        } else {\n          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred);\n        }\n      }\n    };\n\n    if (ajaxBeforeSend(xhr, settings) === false) {\n      xhr.abort();\n      ajaxError(null, 'abort', xhr, settings, deferred);\n      return xhr;\n    }\n\n    if (settings.xhrFields) for (name in settings.xhrFields) {\n      xhr[name] = settings.xhrFields[name];\n    }var async = 'async' in settings ? settings.async : true;\n    xhr.open(settings.type, settings.url, async, settings.username, settings.password);\n\n    for (name in headers) {\n      nativeSetHeader.apply(xhr, headers[name]);\n    }if (settings.timeout > 0) abortTimeout = setTimeout(function () {\n      xhr.onreadystatechange = empty;\n      xhr.abort();\n      ajaxError(null, 'timeout', xhr, settings, deferred);\n    }, settings.timeout);\n\n    // avoid sending empty string (#319)\n    xhr.send(settings.data ? settings.data : null);\n    return xhr;\n  };\n\n  // handle optional data/success arguments\n  function parseArguments(url, data, success, dataType) {\n    if ($.isFunction(data)) dataType = success, success = data, data = undefined;\n    if (!$.isFunction(success)) dataType = success, success = undefined;\n    return {\n      url: url,\n      data: data,\n      success: success,\n      dataType: dataType\n    };\n  }\n\n  $.get = function () /* url, data, success, dataType */{\n    return $.ajax(parseArguments.apply(null, arguments));\n  };\n\n  $.post = function () /* url, data, success, dataType */{\n    var options = parseArguments.apply(null, arguments);\n    options.type = 'POST';\n    return $.ajax(options);\n  };\n\n  $.getJSON = function () /* url, data, success */{\n    var options = parseArguments.apply(null, arguments);\n    options.dataType = 'json';\n    return $.ajax(options);\n  };\n\n  $.fn.load = function (url, data, success) {\n    if (!this.length) return this;\n    var self = this,\n        parts = url.split(/\\s/),\n        selector,\n        options = parseArguments(url, data, success),\n        callback = options.success;\n    if (parts.length > 1) options.url = parts[0], selector = parts[1];\n    options.success = function (response) {\n      self.html(selector ? $('<div>').html(response.replace(rscript, \"\")).find(selector) : response);\n      callback && callback.apply(self, arguments);\n    };\n    $.ajax(options);\n    return this;\n  };\n\n  var escape = encodeURIComponent;\n\n  function serialize(params, obj, traditional, scope) {\n    var type,\n        array = $.isArray(obj),\n        hash = $.isPlainObject(obj);\n    $.each(obj, function (key, value) {\n      type = $.type(value);\n      if (scope) key = traditional ? scope : scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']';\n      // handle data in serializeArray() format\n      if (!scope && array) params.add(value.name, value.value);\n      // recurse into nested objects\n      else if (type == \"array\" || !traditional && type == \"object\") serialize(params, value, traditional, key);else params.add(key, value);\n    });\n  }\n\n  $.param = function (obj, traditional) {\n    var params = [];\n    params.add = function (key, value) {\n      if ($.isFunction(value)) value = value();\n      if (value == null) value = \"\";\n      this.push(escape(key) + '=' + escape(value));\n    };\n    serialize(params, obj, traditional);\n    return params.join('&').replace(/%20/g, '+');\n  };\n})(Zepto);(function ($) {\n  $.fn.serializeArray = function () {\n    var name,\n        type,\n        result = [],\n        add = function add(value) {\n      if (value.forEach) return value.forEach(add);\n      result.push({ name: name, value: value });\n    };\n    if (this[0]) $.each(this[0].elements, function (_, field) {\n      type = field.type, name = field.name;\n      if (name && field.nodeName.toLowerCase() != 'fieldset' && !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' && (type != 'radio' && type != 'checkbox' || field.checked)) add($(field).val());\n    });\n    return result;\n  };\n\n  $.fn.serialize = function () {\n    var result = [];\n    this.serializeArray().forEach(function (elm) {\n      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value));\n    });\n    return result.join('&');\n  };\n\n  $.fn.submit = function (callback) {\n    if (0 in arguments) this.bind('submit', callback);else if (this.length) {\n      var event = $.Event('submit');\n      this.eq(0).trigger(event);\n      if (!event.isDefaultPrevented()) this.get(0).submit();\n    }\n    return this;\n  };\n})(Zepto);(function () {\n  // getComputedStyle shouldn't freak out when called\n  // without a valid element as argument\n  try {\n    getComputedStyle(undefined);\n  } catch (e) {\n    var nativeGetComputedStyle = getComputedStyle;\n    window.getComputedStyle = function (element) {\n      try {\n        return nativeGetComputedStyle(element);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n})();(function ($) {\n  function detect(ua, platform) {\n    var os = this.os = {},\n        browser = this.browser = {},\n        webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/),\n        android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\n        osx = !!ua.match(/\\(Macintosh\\; Intel /),\n        ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/),\n        ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/),\n        iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/),\n        webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/),\n        win = /Win\\d{2}|Windows/.test(platform),\n        wp = ua.match(/Windows Phone ([\\d.]+)/),\n        touchpad = webos && ua.match(/TouchPad/),\n        kindle = ua.match(/Kindle\\/([\\d.]+)/),\n        silk = ua.match(/Silk\\/([\\d._]+)/),\n        blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/),\n        bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/),\n        rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/),\n        playbook = ua.match(/PlayBook/),\n        chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/),\n        firefox = ua.match(/Firefox\\/([\\d.]+)/),\n        firefoxos = ua.match(/\\((?:Mobile|Tablet); rv:([\\d.]+)\\).*Firefox\\/[\\d.]+/),\n        ie = ua.match(/MSIE\\s([\\d.]+)/) || ua.match(/Trident\\/[\\d](?=[^\\?]+).*rv:([0-9.].)/),\n        webview = !chrome && ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/),\n        safari = webview || ua.match(/Version\\/([\\d.]+)([^S](Safari)|[^M]*(Mobile)[^S]*(Safari))/);\n\n    // Todo: clean this up with a better OS/browser seperation:\n    // - discern (more) between multiple browsers on android\n    // - decide if kindle fire in silk mode is android or not\n    // - Firefox on Android doesn't specify the Android version\n    // - possibly devide in os, device and browser hashes\n\n    if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n    if (android) os.android = true, os.version = android[2];\n    if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n    if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n    if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n    if (wp) os.wp = true, os.version = wp[1];\n    if (webos) os.webos = true, os.version = webos[2];\n    if (touchpad) os.touchpad = true;\n    if (blackberry) os.blackberry = true, os.version = blackberry[2];\n    if (bb10) os.bb10 = true, os.version = bb10[2];\n    if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n    if (playbook) browser.playbook = true;\n    if (kindle) os.kindle = true, os.version = kindle[1];\n    if (silk) browser.silk = true, browser.version = silk[1];\n    if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n    if (chrome) browser.chrome = true, browser.version = chrome[1];\n    if (firefox) browser.firefox = true, browser.version = firefox[1];\n    if (firefoxos) os.firefoxos = true, os.version = firefoxos[1];\n    if (ie) browser.ie = true, browser.version = ie[1];\n    if (safari && (osx || os.ios || win)) {\n      browser.safari = true;\n      if (!os.ios) browser.version = safari[1];\n    }\n    if (webview) browser.webview = true;\n\n    os.tablet = !!(ipad || playbook || android && !ua.match(/Mobile/) || firefox && ua.match(/Tablet/) || ie && !ua.match(/Phone/) && ua.match(/Touch/));\n    os.phone = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 || chrome && ua.match(/Android/) || chrome && ua.match(/CriOS\\/([\\d.]+)/) || firefox && ua.match(/Mobile/) || ie && ua.match(/Touch/)));\n  }\n\n  detect.call($, navigator.userAgent, navigator.platform);\n  // make available to unit tests\n  $.__detect = detect;\n})(Zepto);(function ($, undefined) {\n  var prefix = '',\n      eventPrefix,\n      vendors = { Webkit: 'webkit', Moz: '', O: 'o' },\n      testEl = document.createElement('div'),\n      supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,\n      transform,\n      transitionProperty,\n      transitionDuration,\n      transitionTiming,\n      transitionDelay,\n      animationName,\n      animationDuration,\n      animationTiming,\n      animationDelay,\n      cssReset = {};\n\n  function dasherize(str) {\n    return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\n  }\n  function normalizeEvent(name) {\n    return eventPrefix ? eventPrefix + name : name.toLowerCase();\n  }\n\n  $.each(vendors, function (vendor, event) {\n    if (testEl.style[vendor + 'TransitionProperty'] !== undefined) {\n      prefix = '-' + vendor.toLowerCase() + '-';\n      eventPrefix = event;\n      return false;\n    }\n  });\n\n  transform = prefix + 'transform';\n  cssReset[transitionProperty = prefix + 'transition-property'] = cssReset[transitionDuration = prefix + 'transition-duration'] = cssReset[transitionDelay = prefix + 'transition-delay'] = cssReset[transitionTiming = prefix + 'transition-timing-function'] = cssReset[animationName = prefix + 'animation-name'] = cssReset[animationDuration = prefix + 'animation-duration'] = cssReset[animationDelay = prefix + 'animation-delay'] = cssReset[animationTiming = prefix + 'animation-timing-function'] = '';\n\n  $.fx = {\n    off: eventPrefix === undefined && testEl.style.transitionProperty === undefined,\n    speeds: { _default: 400, fast: 200, slow: 600 },\n    cssPrefix: prefix,\n    transitionEnd: normalizeEvent('TransitionEnd'),\n    animationEnd: normalizeEvent('AnimationEnd')\n  };\n\n  $.fn.animate = function (properties, duration, ease, callback, delay) {\n    if ($.isFunction(duration)) callback = duration, ease = undefined, duration = undefined;\n    if ($.isFunction(ease)) callback = ease, ease = undefined;\n    if ($.isPlainObject(duration)) ease = duration.easing, callback = duration.complete, delay = duration.delay, duration = duration.duration;\n    if (duration) duration = (typeof duration == 'number' ? duration : $.fx.speeds[duration] || $.fx.speeds._default) / 1000;\n    if (delay) delay = parseFloat(delay) / 1000;\n    return this.anim(properties, duration, ease, callback, delay);\n  };\n\n  $.fn.anim = function (properties, duration, ease, callback, delay) {\n    var key,\n        cssValues = {},\n        cssProperties,\n        transforms = '',\n        that = this,\n        _wrappedCallback,\n        endEvent = $.fx.transitionEnd,\n        fired = false;\n\n    if (duration === undefined) duration = $.fx.speeds._default / 1000;\n    if (delay === undefined) delay = 0;\n    if ($.fx.off) duration = 0;\n\n    if (typeof properties == 'string') {\n      // keyframe animation\n      cssValues[animationName] = properties;\n      cssValues[animationDuration] = duration + 's';\n      cssValues[animationDelay] = delay + 's';\n      cssValues[animationTiming] = ease || 'linear';\n      endEvent = $.fx.animationEnd;\n    } else {\n      cssProperties = [];\n      // CSS transitions\n      for (key in properties) {\n        if (supportedTransforms.test(key)) transforms += key + '(' + properties[key] + ') ';else cssValues[key] = properties[key], cssProperties.push(dasherize(key));\n      }if (transforms) cssValues[transform] = transforms, cssProperties.push(transform);\n      if (duration > 0 && (typeof properties === 'undefined' ? 'undefined' : _typeof(properties)) === 'object') {\n        cssValues[transitionProperty] = cssProperties.join(', ');\n        cssValues[transitionDuration] = duration + 's';\n        cssValues[transitionDelay] = delay + 's';\n        cssValues[transitionTiming] = ease || 'linear';\n      }\n    }\n\n    _wrappedCallback = function wrappedCallback(event) {\n      if (typeof event !== 'undefined') {\n        if (event.target !== event.currentTarget) return; // makes sure the event didn't bubble from \"below\"\n        $(event.target).unbind(endEvent, _wrappedCallback);\n      } else $(this).unbind(endEvent, _wrappedCallback); // triggered by setTimeout\n\n      fired = true;\n      $(this).css(cssReset);\n      callback && callback.call(this);\n    };\n    if (duration > 0) {\n      this.bind(endEvent, _wrappedCallback);\n      // transitionEnd is not always firing on older Android phones\n      // so make sure it gets fired\n      setTimeout(function () {\n        if (fired) return;\n        _wrappedCallback.call(that);\n      }, (duration + delay) * 1000 + 400);\n    }\n\n    // trigger page reflow so new elements can animate\n    this.size() && this.get(0).clientLeft;\n\n    this.css(cssValues);\n\n    if (duration <= 0) setTimeout(function () {\n      that.each(function () {\n        _wrappedCallback.call(this);\n      });\n    }, 0);\n\n    return this;\n  };\n\n  testEl = null;\n})(Zepto);(function ($, undefined) {\n  var document = window.document,\n      docElem = document.documentElement,\n      origShow = $.fn.show,\n      origHide = $.fn.hide,\n      origToggle = $.fn.toggle;\n\n  function anim(el, speed, opacity, scale, callback) {\n    if (typeof speed == 'function' && !callback) callback = speed, speed = undefined;\n    var props = { opacity: opacity };\n    if (scale) {\n      props.scale = scale;\n      el.css($.fx.cssPrefix + 'transform-origin', '0 0');\n    }\n    return el.animate(props, speed, null, callback);\n  }\n\n  function hide(el, speed, scale, callback) {\n    return anim(el, speed, 0, scale, function () {\n      origHide.call($(this));\n      callback && callback.call(this);\n    });\n  }\n\n  $.fn.show = function (speed, callback) {\n    origShow.call(this);\n    if (speed === undefined) speed = 0;else this.css('opacity', 0);\n    return anim(this, speed, 1, '1,1', callback);\n  };\n\n  $.fn.hide = function (speed, callback) {\n    if (speed === undefined) return origHide.call(this);else return hide(this, speed, '0,0', callback);\n  };\n\n  $.fn.toggle = function (speed, callback) {\n    if (speed === undefined || typeof speed == 'boolean') return origToggle.call(this, speed);else return this.each(function () {\n      var el = $(this);\n      el[el.css('display') == 'none' ? 'show' : 'hide'](speed, callback);\n    });\n  };\n\n  $.fn.fadeTo = function (speed, opacity, callback) {\n    return anim(this, speed, opacity, null, callback);\n  };\n\n  $.fn.fadeIn = function (speed, callback) {\n    var target = this.css('opacity');\n    if (target > 0) this.css('opacity', 0);else target = 1;\n    return origShow.call(this).fadeTo(speed, target, callback);\n  };\n\n  $.fn.fadeOut = function (speed, callback) {\n    return hide(this, speed, null, callback);\n  };\n\n  $.fn.fadeToggle = function (speed, callback) {\n    return this.each(function () {\n      var el = $(this);\n      el[el.css('opacity') == 0 || el.css('display') == 'none' ? 'fadeIn' : 'fadeOut'](speed, callback);\n    });\n  };\n})(Zepto);(function ($) {\n  var data = {},\n      dataAttr = $.fn.data,\n      camelize = $.camelCase,\n      exp = $.expando = 'Zepto' + +new Date(),\n      emptyArray = [];\n\n  // Get value from node:\n  // 1. first try key as given,\n  // 2. then try camelized key,\n  // 3. fall back to reading \"data-*\" attribute.\n  function getData(node, name) {\n    var id = node[exp],\n        store = id && data[id];\n    if (name === undefined) return store || setData(node);else {\n      if (store) {\n        if (name in store) return store[name];\n        var camelName = camelize(name);\n        if (camelName in store) return store[camelName];\n      }\n      return dataAttr.call($(node), name);\n    }\n  }\n\n  // Store value under camelized key on node\n  function setData(node, name, value) {\n    var id = node[exp] || (node[exp] = ++$.uuid),\n        store = data[id] || (data[id] = attributeData(node));\n    if (name !== undefined) store[camelize(name)] = value;\n    return store;\n  }\n\n  // Read all \"data-*\" attributes from a node\n  function attributeData(node) {\n    var store = {};\n    $.each(node.attributes || emptyArray, function (i, attr) {\n      if (attr.name.indexOf('data-') == 0) store[camelize(attr.name.replace('data-', ''))] = $.zepto.deserializeValue(attr.value);\n    });\n    return store;\n  }\n\n  $.fn.data = function (name, value) {\n    return value === undefined ?\n    // set multiple values via object\n    $.isPlainObject(name) ? this.each(function (i, node) {\n      $.each(name, function (key, value) {\n        setData(node, key, value);\n      });\n    }) :\n    // get value from first element\n    0 in this ? getData(this[0], name) : undefined :\n    // set value on all elements\n    this.each(function () {\n      setData(this, name, value);\n    });\n  };\n\n  $.fn.removeData = function (names) {\n    if (typeof names == 'string') names = names.split(/\\s+/);\n    return this.each(function () {\n      var id = this[exp],\n          store = id && data[id];\n      if (store) $.each(names || store, function (key) {\n        delete store[names ? camelize(this) : key];\n      });\n    });\n  }\n\n  // Generate extended `remove` and `empty` functions\n  ;['remove', 'empty'].forEach(function (methodName) {\n    var origFn = $.fn[methodName];\n    $.fn[methodName] = function () {\n      var elements = this.find('*');\n      if (methodName === 'remove') elements = elements.add(this);\n      elements.removeData();\n      return origFn.call(this);\n    };\n  });\n})(Zepto);(function ($) {\n  var slice = Array.prototype.slice;\n\n  function Deferred(func) {\n    var tuples = [\n    // action, add listener, listener list, final state\n    [\"resolve\", \"done\", $.Callbacks({ once: 1, memory: 1 }), \"resolved\"], [\"reject\", \"fail\", $.Callbacks({ once: 1, memory: 1 }), \"rejected\"], [\"notify\", \"progress\", $.Callbacks({ memory: 1 })]],\n        _state = \"pending\",\n        _promise = {\n      state: function state() {\n        return _state;\n      },\n      always: function always() {\n        deferred.done(arguments).fail(arguments);\n        return this;\n      },\n      then: function then() /* fnDone [, fnFailed [, fnProgress]] */{\n        var fns = arguments;\n        return Deferred(function (defer) {\n          $.each(tuples, function (i, tuple) {\n            var fn = $.isFunction(fns[i]) && fns[i];\n            deferred[tuple[1]](function () {\n              var returned = fn && fn.apply(this, arguments);\n              if (returned && $.isFunction(returned.promise)) {\n                returned.promise().done(defer.resolve).fail(defer.reject).progress(defer.notify);\n              } else {\n                var context = this === _promise ? defer.promise() : this,\n                    values = fn ? [returned] : arguments;\n                defer[tuple[0] + \"With\"](context, values);\n              }\n            });\n          });\n          fns = null;\n        }).promise();\n      },\n\n      promise: function promise(obj) {\n        return obj != null ? $.extend(obj, _promise) : _promise;\n      }\n    },\n        deferred = {};\n\n    $.each(tuples, function (i, tuple) {\n      var list = tuple[2],\n          stateString = tuple[3];\n\n      _promise[tuple[1]] = list.add;\n\n      if (stateString) {\n        list.add(function () {\n          _state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n      }\n\n      deferred[tuple[0]] = function () {\n        deferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n        return this;\n      };\n      deferred[tuple[0] + \"With\"] = list.fireWith;\n    });\n\n    _promise.promise(deferred);\n    if (func) func.call(deferred, deferred);\n    return deferred;\n  }\n\n  $.when = function (sub) {\n    var resolveValues = slice.call(arguments),\n        len = resolveValues.length,\n        i = 0,\n        remain = len !== 1 || sub && $.isFunction(sub.promise) ? len : 0,\n        deferred = remain === 1 ? sub : Deferred(),\n        progressValues,\n        progressContexts,\n        resolveContexts,\n        updateFn = function updateFn(i, ctx, val) {\n      return function (value) {\n        ctx[i] = this;\n        val[i] = arguments.length > 1 ? slice.call(arguments) : value;\n        if (val === progressValues) {\n          deferred.notifyWith(ctx, val);\n        } else if (! --remain) {\n          deferred.resolveWith(ctx, val);\n        }\n      };\n    };\n\n    if (len > 1) {\n      progressValues = new Array(len);\n      progressContexts = new Array(len);\n      resolveContexts = new Array(len);\n      for (; i < len; ++i) {\n        if (resolveValues[i] && $.isFunction(resolveValues[i].promise)) {\n          resolveValues[i].promise().done(updateFn(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFn(i, progressContexts, progressValues));\n        } else {\n          --remain;\n        }\n      }\n    }\n    if (!remain) deferred.resolveWith(resolveContexts, resolveValues);\n    return deferred.promise();\n  };\n\n  $.Deferred = Deferred;\n})(Zepto);(function ($) {\n  // Create a collection of callbacks to be fired in a sequence, with configurable behaviour\n  // Option flags:\n  //   - once: Callbacks fired at most one time.\n  //   - memory: Remember the most recent context and arguments\n  //   - stopOnFalse: Cease iterating over callback list\n  //   - unique: Permit adding at most one instance of the same callback\n  $.Callbacks = function (options) {\n    options = $.extend({}, options);\n\n    var memory,\n        // Last fire value (for non-forgettable lists)\n    _fired,\n        // Flag to know if list was already fired\n    firing,\n        // Flag to know if list is currently firing\n    firingStart,\n        // First callback to fire (used internally by add and fireWith)\n    firingLength,\n        // End of the loop when firing\n    firingIndex,\n        // Index of currently firing callback (modified by remove if needed)\n    list = [],\n        // Actual callback list\n    stack = !options.once && [],\n        // Stack of fire calls for repeatable lists\n    fire = function fire(data) {\n      memory = options.memory && data;\n      _fired = true;\n      firingIndex = firingStart || 0;\n      firingStart = 0;\n      firingLength = list.length;\n      firing = true;\n      for (; list && firingIndex < firingLength; ++firingIndex) {\n        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n          memory = false;\n          break;\n        }\n      }\n      firing = false;\n      if (list) {\n        if (stack) stack.length && fire(stack.shift());else if (memory) list.length = 0;else Callbacks.disable();\n      }\n    },\n        Callbacks = {\n      add: function add() {\n        if (list) {\n          var start = list.length,\n              add = function add(args) {\n            $.each(args, function (_, arg) {\n              if (typeof arg === \"function\") {\n                if (!options.unique || !Callbacks.has(arg)) list.push(arg);\n              } else if (arg && arg.length && typeof arg !== 'string') add(arg);\n            });\n          };\n          add(arguments);\n          if (firing) firingLength = list.length;else if (memory) {\n            firingStart = start;\n            fire(memory);\n          }\n        }\n        return this;\n      },\n      remove: function remove() {\n        if (list) {\n          $.each(arguments, function (_, arg) {\n            var index;\n            while ((index = $.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1);\n              // Handle firing indexes\n              if (firing) {\n                if (index <= firingLength) --firingLength;\n                if (index <= firingIndex) --firingIndex;\n              }\n            }\n          });\n        }\n        return this;\n      },\n      has: function has(fn) {\n        return !!(list && (fn ? $.inArray(fn, list) > -1 : list.length));\n      },\n      empty: function empty() {\n        firingLength = list.length = 0;\n        return this;\n      },\n      disable: function disable() {\n        list = stack = memory = undefined;\n        return this;\n      },\n      disabled: function disabled() {\n        return !list;\n      },\n      lock: function lock() {\n        stack = undefined;\n        if (!memory) Callbacks.disable();\n        return this;\n      },\n      locked: function locked() {\n        return !stack;\n      },\n      fireWith: function fireWith(context, args) {\n        if (list && (!_fired || stack)) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          if (firing) stack.push(args);else fire(args);\n        }\n        return this;\n      },\n      fire: function fire() {\n        return Callbacks.fireWith(this, arguments);\n      },\n      fired: function fired() {\n        return !!_fired;\n      }\n    };\n\n    return Callbacks;\n  };\n})(Zepto);(function ($) {\n  var touch = {},\n      touchTimeout,\n      tapTimeout,\n      swipeTimeout,\n      longTapTimeout,\n      longTapEnd,\n      longTapEndTouch = {},\n      longTapDelay = 750,\n      gesture;\n\n  function swipeDirection(x1, x2, y1, y2) {\n    return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';\n  }\n\n  function longTap() {\n    longTapTimeout = null;\n    if (touch.last) {\n      touch.el.trigger('longTap');\n      longTapEnd = true;\n      longTapEndTouch = $.extend(true, {}, touch);\n      touch = {};\n    }\n  }\n\n  function cancelLongTap() {\n    if (longTapTimeout) clearTimeout(longTapTimeout);\n    longTapTimeout = null;\n  }\n\n  function cancelAll() {\n    if (touchTimeout) clearTimeout(touchTimeout);\n    if (tapTimeout) clearTimeout(tapTimeout);\n    if (swipeTimeout) clearTimeout(swipeTimeout);\n    if (longTapTimeout) clearTimeout(longTapTimeout);\n    touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null;\n    touch = {};\n  }\n\n  function isPrimaryTouch(event) {\n    return (event.pointerType == 'touch' || event.pointerType == event.MSPOINTER_TYPE_TOUCH) && event.isPrimary;\n  }\n\n  function isPointerEventType(e, type) {\n    return e.type == 'pointer' + type || e.type.toLowerCase() == 'mspointer' + type;\n  }\n\n  $(document).ready(function () {\n    var now,\n        delta,\n        deltaX = 0,\n        deltaY = 0,\n        firstTouch,\n        _isPointerType;\n\n    if ('MSGesture' in window) {\n      gesture = new MSGesture();\n      gesture.target = document.body;\n    }\n\n    $(document).bind('MSGestureEnd', function (e) {\n      var swipeDirectionFromVelocity = e.velocityX > 1 ? 'Right' : e.velocityX < -1 ? 'Left' : e.velocityY > 1 ? 'Down' : e.velocityY < -1 ? 'Up' : null;\n      if (swipeDirectionFromVelocity) {\n        touch.el.trigger('swipe');\n        touch.el.trigger('swipe' + swipeDirectionFromVelocity);\n      }\n    }).on('touchstart MSPointerDown', function (e) {\n      if ((_isPointerType = isPointerEventType(e, 'down')) && !isPrimaryTouch(e)) return;\n      firstTouch = _isPointerType ? e : e.touches[0];\n      if (e.touches && e.touches.length === 1 && touch.x2) {\n        // Clear out touch movement data if we have it sticking around\n        // This can occur if touchcancel doesn't fire due to preventDefault, etc.\n        touch.x2 = undefined;\n        touch.y2 = undefined;\n      }\n      now = Date.now();\n      delta = now - (touch.last || now);\n      touch.el = $('tagName' in firstTouch.target ? firstTouch.target : firstTouch.target.parentNode);\n      touchTimeout && clearTimeout(touchTimeout);\n      touch.x1 = firstTouch.pageX;\n      touch.y1 = firstTouch.pageY;\n      if (delta > 0 && delta <= 250) touch.isDoubleTap = true;\n      touch.last = now;\n      longTapTimeout = setTimeout(longTap, longTapDelay);\n      // adds the current touch contact for IE gesture recognition\n      if (gesture && _isPointerType) gesture.addPointer(e.pointerId);\n    }).on('touchmove MSPointerMove', function (e) {\n      if ((_isPointerType = isPointerEventType(e, 'move')) && !isPrimaryTouch(e)) return;\n      firstTouch = _isPointerType ? e : e.touches[0];\n      cancelLongTap();\n      touch.x2 = firstTouch.pageX;\n      touch.y2 = firstTouch.pageY;\n\n      deltaX += Math.abs(touch.x1 - touch.x2);\n      deltaY += Math.abs(touch.y1 - touch.y2);\n    }).on('touchend MSPointerUp', function (e) {\n      if ((_isPointerType = isPointerEventType(e, 'up')) && !isPrimaryTouch(e)) return;\n      cancelLongTap();\n      if (longTapEnd) {\n        longTapEndTouch.el.trigger('longTapEnd');\n        longTapEndTouch = {};\n        longTapEnd = false;\n      }\n      // swipe\n      if (touch.x2 && Math.abs(touch.x1 - touch.x2) > 30 || touch.y2 && Math.abs(touch.y1 - touch.y2) > 30) swipeTimeout = setTimeout(function () {\n        touch.el.trigger('swipe');\n        touch.el.trigger('swipe' + swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2));\n        touch = {};\n      }, 0);\n\n      // normal tap\n      else if ('last' in touch)\n          // don't fire tap when delta position changed by more than 30 pixels,\n          // for instance when moving to a point and back to origin\n          if (deltaX < 30 && deltaY < 30) {\n            // delay by one tick so we can cancel the 'tap' event if 'scroll' fires\n            // ('tap' fires before 'scroll')\n            tapTimeout = setTimeout(function () {\n\n              // trigger universal 'tap' with the option to cancelTouch()\n              // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)\n              var event = $.Event('tap');\n              event.cancelTouch = cancelAll;\n              touch.el.trigger(event);\n\n              // trigger double tap immediately\n              if (touch.isDoubleTap) {\n                if (touch.el) touch.el.trigger('doubleTap');\n                touch = {};\n              }\n\n              // trigger single tap after 250ms of inactivity\n              else {\n                  touchTimeout = setTimeout(function () {\n                    touchTimeout = null;\n                    if (touch.el) touch.el.trigger('singleTap');\n                    touch = {};\n                  }, 250);\n                }\n            }, 0);\n          } else {\n            touch = {};\n          }\n      deltaX = deltaY = 0;\n    })\n    // when the browser window loses focus,\n    // for example when a modal dialog is shown,\n    // cancel all ongoing events\n    .on('touchcancel MSPointerCancel', cancelAll);\n\n    // scrolling the window indicates intention of the user\n    // to scroll, not tap or swipe, so cancel all ongoing events\n    $(window).on('scroll', cancelAll);\n  });['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown', 'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function (eventName) {\n    $.fn[eventName] = function (callback) {\n      return this.on(eventName, callback);\n    };\n  });\n})(Zepto);(function ($) {\n  if ($.os.ios) {\n    var parentIfText = function parentIfText(node) {\n      return 'tagName' in node ? node : node.parentNode;\n    };\n\n    var gesture = {},\n        gestureTimeout;\n\n    $(document).bind('gesturestart', function (e) {\n      var now = Date.now(),\n          delta = now - (gesture.last || now);\n      gesture.target = parentIfText(e.target);\n      gestureTimeout && clearTimeout(gestureTimeout);\n      gesture.e1 = e.scale;\n      gesture.last = now;\n    }).bind('gesturechange', function (e) {\n      gesture.e2 = e.scale;\n    }).bind('gestureend', function (e) {\n      if (gesture.e2 > 0) {\n        Math.abs(gesture.e1 - gesture.e2) != 0 && $(gesture.target).trigger('pinch') && $(gesture.target).trigger('pinch' + (gesture.e1 - gesture.e2 > 0 ? 'In' : 'Out'));\n        gesture.e1 = gesture.e2 = gesture.last = 0;\n      } else if ('last' in gesture) {\n        gesture = {};\n      }\n    });['pinch', 'pinchIn', 'pinchOut'].forEach(function (m) {\n      $.fn[m] = function (callback) {\n        return this.bind(m, callback);\n      };\n    });\n  }\n})(Zepto);(function ($) {\n  var slice = Array.prototype.slice;\n\n  function Deferred(func) {\n    var tuples = [\n    // action, add listener, listener list, final state\n    [\"resolve\", \"done\", $.Callbacks({ once: 1, memory: 1 }), \"resolved\"], [\"reject\", \"fail\", $.Callbacks({ once: 1, memory: 1 }), \"rejected\"], [\"notify\", \"progress\", $.Callbacks({ memory: 1 })]],\n        _state2 = \"pending\",\n        _promise2 = {\n      state: function state() {\n        return _state2;\n      },\n      always: function always() {\n        deferred.done(arguments).fail(arguments);\n        return this;\n      },\n      then: function then() /* fnDone [, fnFailed [, fnProgress]] */{\n        var fns = arguments;\n        return Deferred(function (defer) {\n          $.each(tuples, function (i, tuple) {\n            var fn = $.isFunction(fns[i]) && fns[i];\n            deferred[tuple[1]](function () {\n              var returned = fn && fn.apply(this, arguments);\n              if (returned && $.isFunction(returned.promise)) {\n                returned.promise().done(defer.resolve).fail(defer.reject).progress(defer.notify);\n              } else {\n                var context = this === _promise2 ? defer.promise() : this,\n                    values = fn ? [returned] : arguments;\n                defer[tuple[0] + \"With\"](context, values);\n              }\n            });\n          });\n          fns = null;\n        }).promise();\n      },\n\n      promise: function promise(obj) {\n        return obj != null ? $.extend(obj, _promise2) : _promise2;\n      }\n    },\n        deferred = {};\n\n    $.each(tuples, function (i, tuple) {\n      var list = tuple[2],\n          stateString = tuple[3];\n\n      _promise2[tuple[1]] = list.add;\n\n      if (stateString) {\n        list.add(function () {\n          _state2 = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n      }\n\n      deferred[tuple[0]] = function () {\n        deferred[tuple[0] + \"With\"](this === deferred ? _promise2 : this, arguments);\n        return this;\n      };\n      deferred[tuple[0] + \"With\"] = list.fireWith;\n    });\n\n    _promise2.promise(deferred);\n    if (func) func.call(deferred, deferred);\n    return deferred;\n  }\n\n  $.when = function (sub) {\n    var resolveValues = slice.call(arguments),\n        len = resolveValues.length,\n        i = 0,\n        remain = len !== 1 || sub && $.isFunction(sub.promise) ? len : 0,\n        deferred = remain === 1 ? sub : Deferred(),\n        progressValues,\n        progressContexts,\n        resolveContexts,\n        updateFn = function updateFn(i, ctx, val) {\n      return function (value) {\n        ctx[i] = this;\n        val[i] = arguments.length > 1 ? slice.call(arguments) : value;\n        if (val === progressValues) {\n          deferred.notifyWith(ctx, val);\n        } else if (! --remain) {\n          deferred.resolveWith(ctx, val);\n        }\n      };\n    };\n\n    if (len > 1) {\n      progressValues = new Array(len);\n      progressContexts = new Array(len);\n      resolveContexts = new Array(len);\n      for (; i < len; ++i) {\n        if (resolveValues[i] && $.isFunction(resolveValues[i].promise)) {\n          resolveValues[i].promise().done(updateFn(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFn(i, progressContexts, progressValues));\n        } else {\n          --remain;\n        }\n      }\n    }\n    if (!remain) deferred.resolveWith(resolveContexts, resolveValues);\n    return deferred.promise();\n  };\n\n  $.Deferred = Deferred;\n})(Zepto);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(1);\n\n__webpack_require__(0);\n\nconsole.log(pullToRefresh);\n\nfunction stopDrop() {\n    var lastY; //最后一次y坐标点\n    $(document.body).on('touchstart', function (event) {\n        lastY = event.touches[0].pageY; //点击屏幕时记录最后一次Y度坐标。\n    });\n    $(document.body).on('touchmove', function (event) {\n\n        var y = event.touches[0].pageY;\n        var st = $(this).scrollTop(); //滚动条高度\n        if (y >= lastY && st <= 10) {\n            //如果滚动条高度小于0，可以理解为到顶了，且是下拉情况下，阻止touchmove事件。\n            lastY = y;\n            event.preventDefault();\n        }\n        lastY = y;\n    });\n}\n\nstopDrop();\n\npullToRefresh.init({\n    // required\n    ptrElement: '#ptr-instructions', // 'pull to refresh' intructions element\n    ptrTextElement: '.ptr-instructions-text', // intructions' text element\n    targetElement: '#main', // target element that will be dragged and refreshed\n\n    // optional\n    instructionsPullToRefresh: 'pull to refresh', // text\n    instructionsReleaseToRefresh: 'Release to refresh', //text\n    instructionsRefreshing: 'refreshing', // text\n    threshold: 60, // minimum distance required to trigger the onPull callback\n    thresholdUp: 30, // minimum distance required to trigger the onPull callback\n\n    upElement: '#up-instructions',\n    upTextElement: '.up-instructions-text',\n\n    onPull: function onPull() {\n        // callback fn\n        // alert('onPull fired');\n        var contentCt = document.getElementById('content');\n        var newItem = document.createElement(\"DIV\");\n        var textnode = document.createTextNode(\"pullDown\");\n        newItem.appendChild(textnode);\n        newItem.className = 'item';\n        document.getElementById('content').insertBefore(newItem, contentCt.childNodes[0]);\n    },\n\n    onPullUp: function onPullUp() {\n        var contentCt = document.getElementById('content');\n        var newItem = document.createElement(\"DIV\");\n        var textnode = document.createTextNode(\"pullUp\");\n        newItem.appendChild(textnode);\n        newItem.className = 'item';\n        document.getElementById('content').appendChild(newItem, contentCt.childNodes[0]);\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvYXBwLmpzPzkwZTkiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsInB1bGxUb1JlZnJlc2giLCJzdG9wRHJvcCIsImxhc3RZIiwiJCIsImRvY3VtZW50IiwiYm9keSIsIm9uIiwiZXZlbnQiLCJ0b3VjaGVzIiwicGFnZVkiLCJ5Iiwic3QiLCJzY3JvbGxUb3AiLCJwcmV2ZW50RGVmYXVsdCIsImluaXQiLCJwdHJFbGVtZW50IiwicHRyVGV4dEVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiaW5zdHJ1Y3Rpb25zUHVsbFRvUmVmcmVzaCIsImluc3RydWN0aW9uc1JlbGVhc2VUb1JlZnJlc2giLCJpbnN0cnVjdGlvbnNSZWZyZXNoaW5nIiwidGhyZXNob2xkIiwidGhyZXNob2xkVXAiLCJ1cEVsZW1lbnQiLCJ1cFRleHRFbGVtZW50Iiwib25QdWxsIiwiY29udGVudEN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJuZXdJdGVtIiwiY3JlYXRlRWxlbWVudCIsInRleHRub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZCIsImNsYXNzTmFtZSIsImluc2VydEJlZm9yZSIsImNoaWxkTm9kZXMiLCJvblB1bGxVcCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQUEsUUFBUUMsR0FBUixDQUFZQyxhQUFaOztBQUVBLFNBQVNDLFFBQVQsR0FBb0I7QUFDaEIsUUFBSUMsS0FBSixDQURnQixDQUNOO0FBQ1ZDLE1BQUVDLFNBQVNDLElBQVgsRUFBaUJDLEVBQWpCLENBQW9CLFlBQXBCLEVBQWtDLFVBQVNDLEtBQVQsRUFBZ0I7QUFDOUNMLGdCQUFRSyxNQUFNQyxPQUFOLENBQWMsQ0FBZCxFQUFpQkMsS0FBekIsQ0FEOEMsQ0FDZjtBQUNsQyxLQUZEO0FBR0FOLE1BQUVDLFNBQVNDLElBQVgsRUFBaUJDLEVBQWpCLENBQW9CLFdBQXBCLEVBQWlDLFVBQVNDLEtBQVQsRUFBZ0I7O0FBRTdDLFlBQUlHLElBQUlILE1BQU1DLE9BQU4sQ0FBYyxDQUFkLEVBQWlCQyxLQUF6QjtBQUNBLFlBQUlFLEtBQUtSLEVBQUUsSUFBRixFQUFRUyxTQUFSLEVBQVQsQ0FINkMsQ0FHZjtBQUM5QixZQUFJRixLQUFLUixLQUFMLElBQWNTLE1BQU0sRUFBeEIsRUFBNEI7QUFBQztBQUN6QlQsb0JBQVFRLENBQVI7QUFDQUgsa0JBQU1NLGNBQU47QUFDSDtBQUNEWCxnQkFBUVEsQ0FBUjtBQUVILEtBVkQ7QUFXSDs7QUFFRFQ7O0FBRUFELGNBQWNjLElBQWQsQ0FBbUI7QUFDZjtBQUNBQyxnQkFBWSxtQkFGRyxFQUVrQjtBQUNqQ0Msb0JBQWdCLHdCQUhELEVBRzJCO0FBQzFDQyxtQkFBZSxPQUpBLEVBSVM7O0FBRXhCO0FBQ0FDLCtCQUEyQixpQkFQWixFQU8rQjtBQUM5Q0Msa0NBQThCLG9CQVJmLEVBUXFDO0FBQ3BEQyw0QkFBd0IsWUFUVCxFQVN1QjtBQUN0Q0MsZUFBVyxFQVZJLEVBVUE7QUFDZkMsaUJBQWEsRUFYRSxFQVdFOztBQUVqQkMsZUFBVSxrQkFiSztBQWNmQyxtQkFBYyx1QkFkQzs7QUFnQmZDLFlBQVEsa0JBQVU7QUFBRTtBQUNoQjtBQUNBLFlBQUlDLFlBQVl0QixTQUFTdUIsY0FBVCxDQUF3QixTQUF4QixDQUFoQjtBQUNBLFlBQUlDLFVBQVF4QixTQUFTeUIsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0EsWUFBSUMsV0FBUzFCLFNBQVMyQixjQUFULENBQXdCLFVBQXhCLENBQWI7QUFDQUgsZ0JBQVFJLFdBQVIsQ0FBb0JGLFFBQXBCO0FBQ0FGLGdCQUFRSyxTQUFSLEdBQWtCLE1BQWxCO0FBQ0E3QixpQkFBU3VCLGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUNPLFlBQW5DLENBQWdETixPQUFoRCxFQUF3REYsVUFBVVMsVUFBVixDQUFxQixDQUFyQixDQUF4RDtBQUNILEtBeEJjOztBQTBCZkMsY0FBVSxvQkFBVTtBQUNoQixZQUFJVixZQUFZdEIsU0FBU3VCLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBaEI7QUFDQSxZQUFJQyxVQUFReEIsU0FBU3lCLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBLFlBQUlDLFdBQVMxQixTQUFTMkIsY0FBVCxDQUF3QixRQUF4QixDQUFiO0FBQ0FILGdCQUFRSSxXQUFSLENBQW9CRixRQUFwQjtBQUNBRixnQkFBUUssU0FBUixHQUFrQixNQUFsQjtBQUNBN0IsaUJBQVN1QixjQUFULENBQXdCLFNBQXhCLEVBQW1DSyxXQUFuQyxDQUErQ0osT0FBL0MsRUFBdURGLFVBQVVTLFVBQVYsQ0FBcUIsQ0FBckIsQ0FBdkQ7QUFDSDtBQWpDYyxDQUFuQiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi9saWIvemVwdG8nO1xuaW1wb3J0ICcuL3B1bGx0b3JlZnJlc2guanMnO1xuY29uc29sZS5sb2cocHVsbFRvUmVmcmVzaCk7XG5cbmZ1bmN0aW9uIHN0b3BEcm9wKCkge1xuICAgIHZhciBsYXN0WTsvL+acgOWQjuS4gOasoXnlnZDmoIfngrlcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgbGFzdFkgPSBldmVudC50b3VjaGVzWzBdLnBhZ2VZOy8v54K55Ye75bGP5bmV5pe26K6w5b2V5pyA5ZCO5LiA5qyhWeW6puWdkOagh+OAglxuICAgIH0pO1xuICAgICQoZG9jdW1lbnQuYm9keSkub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIHkgPSBldmVudC50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICB2YXIgc3QgPSAkKHRoaXMpLnNjcm9sbFRvcCgpOyAvL+a7muWKqOadoemrmOW6plxuICAgICAgICBpZiAoeSA+PSBsYXN0WSAmJiBzdCA8PSAxMCkgey8v5aaC5p6c5rua5Yqo5p2h6auY5bqm5bCP5LqOMO+8jOWPr+S7peeQhuino+S4uuWIsOmhtuS6hu+8jOS4lOaYr+S4i+aLieaDheWGteS4i++8jOmYu+atonRvdWNobW92ZeS6i+S7tuOAglxuICAgICAgICAgICAgbGFzdFkgPSB5O1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0WSA9IHk7XG5cbiAgICB9KTtcbn1cblxuc3RvcERyb3AoKTtcblxucHVsbFRvUmVmcmVzaC5pbml0KHtcbiAgICAvLyByZXF1aXJlZFxuICAgIHB0ckVsZW1lbnQ6ICcjcHRyLWluc3RydWN0aW9ucycsIC8vICdwdWxsIHRvIHJlZnJlc2gnIGludHJ1Y3Rpb25zIGVsZW1lbnRcbiAgICBwdHJUZXh0RWxlbWVudDogJy5wdHItaW5zdHJ1Y3Rpb25zLXRleHQnLCAvLyBpbnRydWN0aW9ucycgdGV4dCBlbGVtZW50XG4gICAgdGFyZ2V0RWxlbWVudDogJyNtYWluJywgLy8gdGFyZ2V0IGVsZW1lbnQgdGhhdCB3aWxsIGJlIGRyYWdnZWQgYW5kIHJlZnJlc2hlZFxuXG4gICAgLy8gb3B0aW9uYWxcbiAgICBpbnN0cnVjdGlvbnNQdWxsVG9SZWZyZXNoOiAncHVsbCB0byByZWZyZXNoJywgLy8gdGV4dFxuICAgIGluc3RydWN0aW9uc1JlbGVhc2VUb1JlZnJlc2g6ICdSZWxlYXNlIHRvIHJlZnJlc2gnLCAvL3RleHRcbiAgICBpbnN0cnVjdGlvbnNSZWZyZXNoaW5nOiAncmVmcmVzaGluZycsIC8vIHRleHRcbiAgICB0aHJlc2hvbGQ6IDYwLCAvLyBtaW5pbXVtIGRpc3RhbmNlIHJlcXVpcmVkIHRvIHRyaWdnZXIgdGhlIG9uUHVsbCBjYWxsYmFja1xuICAgIHRocmVzaG9sZFVwOiAzMCwgLy8gbWluaW11bSBkaXN0YW5jZSByZXF1aXJlZCB0byB0cmlnZ2VyIHRoZSBvblB1bGwgY2FsbGJhY2tcblxuICAgIHVwRWxlbWVudDonI3VwLWluc3RydWN0aW9ucycsXG4gICAgdXBUZXh0RWxlbWVudDonLnVwLWluc3RydWN0aW9ucy10ZXh0JyxcblxuICAgIG9uUHVsbDogZnVuY3Rpb24oKXsgLy8gY2FsbGJhY2sgZm5cbiAgICAgICAgLy8gYWxlcnQoJ29uUHVsbCBmaXJlZCcpO1xuICAgICAgICBsZXQgY29udGVudEN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTtcbiAgICAgICAgbGV0IG5ld0l0ZW09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKVxuICAgICAgICBsZXQgdGV4dG5vZGU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJwdWxsRG93blwiKTtcbiAgICAgICAgbmV3SXRlbS5hcHBlbmRDaGlsZCh0ZXh0bm9kZSk7XG4gICAgICAgIG5ld0l0ZW0uY2xhc3NOYW1lPSdpdGVtJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5pbnNlcnRCZWZvcmUobmV3SXRlbSxjb250ZW50Q3QuY2hpbGROb2Rlc1swXSk7XG4gICAgfSxcblxuICAgIG9uUHVsbFVwOiBmdW5jdGlvbigpe1xuICAgICAgICBsZXQgY29udGVudEN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTtcbiAgICAgICAgbGV0IG5ld0l0ZW09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKVxuICAgICAgICBsZXQgdGV4dG5vZGU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJwdWxsVXBcIik7XG4gICAgICAgIG5ld0l0ZW0uYXBwZW5kQ2hpbGQodGV4dG5vZGUpO1xuICAgICAgICBuZXdJdGVtLmNsYXNzTmFtZT0naXRlbSc7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50JykuYXBwZW5kQ2hpbGQobmV3SXRlbSxjb250ZW50Q3QuY2hpbGROb2Rlc1swXSk7XG4gICAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")}]);